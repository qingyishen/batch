原帖地址：http://hi.baidu.com/bigtoothcat/blog/item/d7390b9a401685bdc9eaf421.html

什么是VBScript呢? VBScript的全称是:Microsoft Visual Basic Script Editon.(微软公司可视化BASIC脚本版). 正如其字面所透露的信息, VBS(VBScript的进一步简写)是基于Visual Basic的脚本语言. 我进一步解释一下, Microsoft Visual Basic是微软公司出品的一套可视化编程工具, 语法基于Basic. 脚本语言, 就是不编译成二进制文件, 直接由宿主(host)解释源代码并执行, 简单点说就是你写的程序不需要编译成.exe, 而是直接给用户发送.vbs的源程序, 用户就能执行了. 
我知道菜鸟现在最关心的就是用什么工具来开发VBS程序了, 答案是:记事本.(Notepad).我不是开玩笑, 其实任何一种文本编辑器都可以用来开发VBS开发, 只不过记事本是由系统自带的, 比较好找而已. 尽管如此, 我还是建议你去下载一个专业的文本编辑器, 因为这些工具可以提供 "语法高亮"等功能, 更加方便开发, 用哪一个随你喜好, 我比较喜欢Edit Plus (2.10). 
OK, 我们先来写一个VBScript程序热热身. 
REM 输入并回显你的名字 
\'使用InputBox和Msgbox函数 
Dim name,msg 
msg="请输入你的名字:" 
name=Inputbox(msg,"名称") 
Msgbox(name) 
把上面的程序清单输入到记事本里面, 然后保存为以.vbs为扩展名的文件("保存类型"里面选择"所有文件").然后双击运行, 观察运行结果. 注意:请自己输入程序清单, 不要复制->粘贴 
我来解释一下这个程序, 第一行和第二行的开头分别是"REM"语句和" \' ", 这两个东西的作用是相同的, 表示本行是注释行, 就是说这两行什么也不干,只是用来说明这段程序的功能, 版权信息等等. 注释行是程序最重要的部分之一, 尽管它不是必需的, 但对于其他人阅读源代码, 以及自己分析源代码是很有好处的. 好的习惯是在必要的地方加上清晰, 简洁的注释. 
Dim用来声明一个变量, 在VBS中, 变量类型并不是那么重要, 就是说VBS会帮你自动识别变量类型, 而且变量在使用前不一定要先声明, 程序会动态分配变量空间. 在VBS中你不用考虑name储存的是一个整数还是一个小数(学名叫"浮点数"), 也不用考虑是不是字符串(一串字符, 比如:"Hello World"), VBS会自动帮你搞定. 所以第三行语句可以删除, 效果不会变, 但我强烈反对这么做, 一个变量的基本原则就是:先声明,后使用.变量名用字母开头,可以使用下划线,数字, 但不能使用vbs已经定义的字, 比如dim, 也不能是纯数字. 
下一行被称之为"赋值", "="是赋值符号, 并不是数学中的等于号, 尽管看起来一样.这是正统的理解, 你要理解成等于也没有什么不可. 赋值号的左边是一个变量, 右边是要赋给变量的值, 经过赋值以后, msg这个变量在程序中等同于"请输入你的名字:"这个字符串,但当msg被再次复制的时候, 原值就会消失. 不光字符串, 其他任何变量都这样被赋值, 例如: a=2, b=12.222等等. 
再往下,Inputbox和Msgbox是VBS内建的函数, 一个函数就相当于一个"黑箱", 有输入(参数)和输出(返回值), 你可以不用了解函数是怎么运作的, 只要了解这个函数能干什么就行了, 我们也可以定义自己的函数, 不过那要等到以后再讲. 现在我们只要了解, 一个函数可以有返回值也可以没有, 可以有参数也可以没有. 例如Inputbox就是有返回值的函数, 我们用赋值号左边的变量来"接"住InputBox的返回值--就是你输入的内容. 在inputbox右边的括号里是参数列表, 每个参数用","分隔开, 每个参数有不同的功效, 比如第一个参数会显示在提示里, 我们把msg这个变量作为第一个参数传给了Inputbox 函数, 而msg="请输入你的名字:", 所以我们在对话框的提示栏就会看到"请输入你的名字:" 第二个参数是对话框的标题, 我们用直接量(学名叫"常量", 这里是"字符串常量")传递给函数, 当然你也可以传递变量. Inputbox还有很多参数, 比如你在"名称"后面再加一个","然后输入随便一串字符(字符串,用双引号""包裹起来的一串字符叫做字符串)然后运行, 看看结果. 你会发现用于输入的文本框有了默认的值, 这就是第三个参数的作用. 
Msgbox函数是用来输出的函数, 在VBS中没有专门的输出函数(BASIC中的print,C中的printf), 所以我们只能用对话框来观察输出结果, Msgbox的必要参数只有一个, 就是要输出的内容, 在这种情况下, 我们不需要理会msgbox的返回值. 关于Msgbox和Inputbox我们以后还会在讨论, 今天只是热热身, 到此为止. 
要点: 
1) 注释(以REM或\'开头)行在程序中不起作用, 但能让别人更容易读懂你的程序. 
2) 变量好像一个盒子, 或一个代号, 可以代表你想代表的东西. 变量赋值使用"=" 
3) 以""包裹起来的字符称之为"字符串" 
4) 函数像一个"黑箱", 有参数和返回值, 用"="左边的变量可以接住返回值 
5) Inputbox函数弹出一个输入对话框,Msgbox则用于输出 
作业: 
1) 试验Inputbox的第三个参数 
2) 写一段程序输出你的年龄 
3) 写一段程序进行3次输入, 分别输入你和你父母的姓名(要求显示提示), 并分3次输出

第二篇： 
今天讲各种"量"和基本运算 
先说常量, 这个比较简单. 
什么是常量呢, 常量就是其值不可变化的量. 
常量分为两种:第一种, 自然常量. 这叫是因为它们本身就是常量, 你怎么更改21的值呢? 他永远都是21, 不可能变成46 
如果你在程序中使用"21=46", 这样的语句将会引发一个错误. 同样的, 字符串也是常量 (还记得字符串吗? 就是包裹在""之间的一串字符), "Hello World"就是一个例子, 如果你使用"Hello World"="Bye"这样的语句同样会引发一个错误. 你能举出自然常量的更多例子吗? 
第二种, 是我们自己定义的常量,这种量也使用代号, 他们也被赋值, 但和变量的不同点在于, 他们在定义的时候被赋值,以后就不能改变了,如果企图改变将会引发一个错误. 定义一个变量,我们使用"const"这个关键字(关键字的意思是系统定义了有特殊功能的字, 不能作为变量名或常量名使用),格式是:const 常量名=常量值. 
例如: 
const PI=3.1415926 
const NAME="记忆碎片" 
这样我们就定义了两个常量, PI和NAME, 一般说来, 常量名全部使用大写, 但也可以不用, 随你喜好. 将一些在程序中不需要改变的值定义为常量是个好习惯, 这样能防止不必要的意外. 另外, 使用自定义常量也可以减少你的工作量. 比如: 
msgbox("Hello World") 
msgbox("Hello World") 
msgbox("Hello World") 
msgbox("Hello World") 
msgbox("Hello World") 
这个程序输出五次Hello World, 如果你想要改变输出为Bye-Bye, 就必须修改全部程序, 当然你可以手动修改5次, 但如果你要输出1000次呢? 常量就可以替我们解决这个问题: 
const hw="Hello World" 
msgbox(hw) 
msgbox(hw) 
msgbox(hw) 
msgbox(hw) 
msgbox(hw) 
这样当你要修改输出的时候只要修改hw的值就行了. 
好了, 现在我们来看看编程的第一块重要"基石":变量. 解释变量最好的办法我觉得是"盒子", 一个变量好像一个盒子, 里面只能装一个东西, 当你要装进去别的东西的时候必须把原有的东西拿出来. 这个"盒子"是有名称的, 当你在程序中使用变量的时候, 系统会打开盒子取出里面的东西, 让这些东西参与处理, 而不是盒子. 有些语言是很依赖"盒子"里面装些什么东西, 这样才能找到合适的"盒子"(比如C语言), 但VBS给我提供的是能够自动伸缩的"魔术盒", 我们不用关心装进去的是什么东西, 
VBS会自动调整盒子的大小. 例如: 
Dim a1,a2,a3 
a1=14 
a2=12.23 
a3="Hello" 
而不用像C语言那样麻烦: 或者是VB的正规声明(VB可以声明也可以不用)那样: 
int a1; Dim a1 as integer 
float a2; Dim a2 as Double 
char* a3; Dim a3 as strnig 
a1=14; a1=14 
a2=12.23; a2=12.23 
a3="Hello"; a3="Hello" 
嗯……扯远了…… 
变量有什么用呢? 哇, 那用处可大了. 最简单, 你并不能确定程序运行时变量的值, 比如前一节课我们编的输入姓名的程序, 你不能确定InputBox返回的是什么(还记得Inputbox的返回值吗? 就是你输入的内容), 所以你就没有办法应对各种情况, 但我们用name这个"盒子"把用户的名字装起来, 到用的时候我们只要知道name这个盒子的名字就行了, 系统会自己打开他并把里面的内容拿出来用. 再举个例子, 我们编写一个程序计算一个矩形的面积, 比如这个程序要发给小学生使用: 
dim a,b,s 
a=15 
b=12 
s=a*b 
msgbox(s) 
这样就可以求出长为15,宽为12的矩形的面积了, 是不是很简单? 当然, 这个程序也可以这样写: 
dim s 
s=15*12 
msgbox(s) 
这样看起来程序短了许多, 也节约内存, 但并不是鼓励的做法, 为什么? 请看下面. 
现在, 我们的程序要变得像点样子才行, 谁的程序写出来还要别人修改源代码才能用啊? 
所以, 我们要接受用户的输入, 还记得吗? InputBox函数. 
修改后程序如下: 
dim a,b,s 
a=inputbox("请输入矩形的长:") 
b=inputbox("请输入矩形的宽:") 
s=a*b 
msgbox(s) 
ok, 这么一修改, 无论用户输入怎样的数据, 我们都能计算出矩形的面积了. 如果你用s=15*12能改嘛? 当然不行. 
我想你已经发现了, vbs中的数学计算和真正的算术没有什么不同, +,-,*,/,(),[],{}都是一样的用法, 比如: 
dim ans 
ans=12+32/4+[(23-10)*2] 
msgbox(ans) 
四则运算的法则在编程中同样生效, 你可以在编程中重新获得小学时候的乐趣(你恨数学?那就别学电脑了). 
在编程中有一个有趣的运算符是"mod", 这个运算符叫做"取余运算符", 就是取得一次除法的余数, 例如 
dim a 
a=16 mod 5 
你知道a等于几吗? Bingo! 没错, 就是1. 因为16 / 5 =3....1, 所以mod计算的结果就是1. 
还有一个运算符是"^"(就是键盘"6"上面的小箭头), 他表示"乘幂"(或者是"方") 比如: 
dim a,b,c 
a=2 
b=a^2 
c=a^3 
msgbox(a) 
msgbox(c) 
则b=a*a=4, c=a*a*a=8 
我们一次不要讲太多, 这次就讲到这里, 现在总结一下. 
要点: 
1) 常量分为自然常量和自定义常量, 常量的值不可修改 
2) 变量就像盒子, 我们不在乎盒子里装的是什么, 但一定要知道盒子的名字 
3) 四则运算在编程中没有任何不同 
4) MOD是取余运算 
作业: 
1) 编一个程序, 计算圆形的面积, 半径由用户给出 (使用Inputbox) PI取值3.14159 
2) 编一个程序取得20 / 3 的余数 



第三篇（共六篇）： 
首先, 我来解决一下上次课程的几个疑问 
第一, 那个余数问题, 16 / 5 = 3...1, 是因为我改过前面的部分, 后面的忘了改了, 不好意思. 
第二, 请看一下程序清单: 

1) 
Dim a,b,c 
a=inputbox("a是:","输入半径") 
b=Inputbox("b是:","输入半径") 
c=a*2+b*2 
Msgbox(c) 
这个 输入1、2时是6 

2) 
Dim a,b,c 
a=inputbox("a是:","输入半径") 
b=Inputbox("b是:","输入半径") 
c=(a+b)*2 
Msgbox(c) 
这个输入1、2时是24 

为什么会不一样呢? 在数学上c=(a+b)*2 和 c=a*2+b*2是等价的, 在VBS中也是如此. 问题出在"+"上, 在VBS中, +不仅仅是加号的意思还表示把两个字符串连接起来, 例如"Hello"+"World"="HelloWorld" have you understood? 你还记得InoutBox函数的返回值吗? 是字符串! 这就看出问题了吧, 在编程中"1"不等于(<>)1, "1"是一个字符, 而1是一个数, 所以a,b都是字符串变量, "1"+"2"="12", 这就好像我们小时跟伙伴开玩笑问他们1+1=?一样, 我们总是笑着说"错啦,应该是11".但为什么, a可以*2却不发生错误呢? 这时VBS比较智能的一个表现, 如果这个字符串的内容是一个数且对他进行数学运算, 则把字符串强制转换成数参与运算, 如果字符串代表一个数, 但不参加数学运算, 而是参加字符串运算(合并)则当作字符串处理, 所以你看到a+b=12, 这时候a+b的结果(12)是一个字符串, 当它要乘以2的时候就被强制转换成了数字12, 这样我就得到了结果24. 

怎么修改这个程序呢? 我们需要用到另一个内建的函数:int, int函数的功能是将输入值转化成整数值, 我们这样修改: 

c=(int(a)+int(b))*2 

这个意思就是把a作为参数传递给int函数, int函数就会返回那个整数(你的输入值), 然后让返回值参与运算, 这样就得到了正确答案.所以,以后如果你用的是inputbox函数的话,最好用int语句加工一下:比如c=int(c) ''''c是你自己的变量 

大家是不是觉得这个课程有点枯燥, 呵呵, 变量和运算符部分的确是这样的, 不过多多练习也就好了, 这次, 我们写写真正好玩的东西: 流程控制语句. 这个部分开始才是真正的编程. 

首先介绍判断结构. 

在此之前, 我们先介绍一种简单的变量类型:布尔值(Boolean), 这种变量只有两个可能值:True,Flase,即真或假. 这种变量在某些情况下很有用(比如"开关"). 我们定义一个bool变量的方法和其他变量一样, 赋值也一样, 例如: 

dim a,b 
a=true 
b=false 

注意,true和"true"是不一样的, "true"是字符串,true是布尔值, 千万不能混淆. 

回到if语句上来, 我们先来看看简化版的if语句:if 判断式 then 语句体 我们来看一个例子: 

dim a,b 
a=12 
b=13 
if b>a then msgbox("B大于A") 

我们只看最后一行, a>b这个式子(表达式)有一个返回值, 是bool型的. 因为这个式子只有两种可能:b大于a, b不大于a, 所以这个式子也只有两种可能性, 即真或者假. if语句判断这个表达式的返回值是真还是假, 如果是真(true)则执行then后面的语句, 如果是假, 则不执行, 你把a的值改成14看看还会不会弹出对话框? 

当我们要在判断之后执行多行语句怎么办呢, 我们需要用语句块来解决, 在这里可以叫块if 

dim a,b 
a=12 
b=13 
if a<b then 
msgbox("A小于B") 
msgbox("B大于A") 
end if 

两个msgbox函数夹在if和end if之间, 这个部分就是语句块, 块里的每一条语句之前请空出4--8(一个<Tab>键)个格, 这不是必需的, 但是是一个好习惯, 以便看清楚程序的结构. 这样我们就能运行多于一个的语句, 请注意if...then...end if 这三个关键部分不要掉了. OK, 我出一个题, 输入一个数, 如果小于100就输出"错误", 如果大于100就输出"正确", 我这里有两个程序版本: 

dim a 
a=inputbox("请输入一个大于100的数") 
a=int(a) ''''inputbox返回的是字符串, 我们把他变成整数 : ) 
if a>100 then msgbox("正确") 
if a<100 then msgbox("错误") 

还有一个更简单的 

dim a 
a=inputbox("请输入一个大于100的数") 
a=int(a) ''''inputbox返回的是字符串, 我们把他变成整数 
if a>100 then 
msgbox("正确") 
else 
msgbox("错误") 
end if 

看到多了一个else了吧, else的作用就是当要判断的表达式为false时执行的. 这样程序就可以处理两种不同的情况了. 不要忘了用end if结尾 

嘿嘿, 我是变态者, 现在我要你处理三种情况, <100,=100,>100, 还要写在一个if结构里, 你怎么办, 我给你答案: 

dim a 
a=inputbox("请输入一个大于100的数") 
a=int(a) ''''inputbox返回的是字符串, 我们把他变成整数 
if a>100 then 
msgbox("正确") 
elseif a=100 then 
msgbox("老大, 你耍我?") 
else 
msgbox("错误") 
end if 

这次输入100看看, 是什么? else if语句可以在if结构中多次出现, 以灵活判断不同的情况 (如果你要判断得太多, 就请使用"选择结构", 过会儿就讲), 当所有elseif都处理完了,而没有符合情况的时候再执行else中的语句.另一个例子: 

Dim a,b,c,d 
a=inputbox("a是:","输入半径") 
b=Inputbox("b是:","输入半径") 
d=Inputbox("答案:","输入答案") 

c=a*2+b*2 ''''这里没有问题, 会自动转换 
if d=c then 
Msgbox("你好聪明") 
else 
Msgbox("你好猪头 自己的题还不会!") 
end if 

再看看这个, 无论你回答得多么正确你都是猪头, 哈哈, 不是我耍你, 还是文章开始时候的inputbox的返回类型在耍你, d是inputbox的返回值, 他是一个字符串, 而c是一次整数计算的结果, 他是一个整数. 一个字符串无论如何也不等于一个整数, 尽管他们字面上是一样的:"8"<>(不等于号)8 所以if的判断式的值永远是false, 总是执行else部分的语句. 我们可以这么修改 

Dim a,b,c,d 
a=inputbox("a是:","输入半径") 
b=Inputbox("b是:","输入半径") 
d=Inputbox("答案:","输入答案") 
d=int(d) 
''''在这里我们取出了d的值, 变成整数, 在放回"d"这个盒子里 
c=a*2+b*2 
if d=c then 
Msgbox("你好聪明") 
else 
Msgbox("你好猪头 自己的题还不会!") 
end if 

这样就成功了. 这也是Inputbox函数的一个讨厌的地方, 没办法, vbs没有其他好的输入方式了. 

说到if, 我们不得不说一说逻辑运算符, 今天介绍两种, "and" 和 "or" 学会了if语句之后, 我举一个例子, 你一看就明白了. 

dim a,b 
a=inputbox("输入一个数 >10") 
b=inputbox("输入另一个数 >10") 
a=int(a) 
b=int(b) 
if a>10 and b>10 then 
msgbox("正确") 
else 
msgbox("错误") 
end if 

这段程序让你输入两个值, 必须都大于10, 只要有一个不大于, 就输出错误 

dim a,b 
a=inputbox("输入一个数 >10") 
b=inputbox("输入另一个数 >10") 
a=int(a) 
b=int(b) 
if a>10 or b>10 then 
msgbox("正确") 
else 
msgbox("错误") 
end if 


这段程序让你输入两个值, 只要有一个大于10, 就返回成功. 其实and和or很好理解, 我读"if a>10 or b>10 then" 这一句, 用华语是这样:"如果a大于10或者b大于10, 那么...". 这样是不是就很好理解了呢. 

OK, 我们再来看一种新结构, 今天的课就结束, 已经午夜了, 我都累死了. 

当你的程序要处理很多种不同的判断情况的时候elseif..then会让程序看起来很杂乱, 所以就有了一种select case结构专门对付这种情况, select case的语法结构很简单: 

select case 变量名 
case 值 
语句 
case 值 
语句 
case else 
语句 
end select 


我们举个例子就能很简单的说明： 

dim a 
a=inputbox("输入一个1--3的值") 
a=int(a) ''''处理inputbox返回字符串的问题 
select case a 
case 1 
msgbox("壹") 
case 2 
msgbox("贰") 
case 3 
msgbox("叁") 
case else 
msgbox("输入错误") 
end select 

这个例子把1,2,3这三个阿拉伯数字转化成中国大写数字, 这个程序写成if...elseif 的形式如下 

dim a 
a=inputbox("请输入1--3的值") 
a=int(a) 
if a=1 then 
msgbox("壹") 
elseif a=2 then 
msgbox("贰") 
elseif a=3 then 
msgbox("叁") 
else 
msgbox("输入错误") 
end if 

怎么样, 麻烦吧, 还是select好吧. 

OK, 今天到此结束, 总结一下: 


要点: 

1) inputbox返回的是一个字符串, 而不是一个数, 必须用a=int(a)这种形式转化成数 

2) bool变量的值只有两种:true,false 

2.5) and两边的表达式都是true, 则返回true. or两边的表达式有一个是true, 就返回true 

3) if 语句的格式 

4) select...case的格式 


作业: 

1) 使用3个bool值, 储存你的3兄弟姐妹是否是男性 (提示:sister1male=false) 

2) 给定一个个数, 大于10而且小于20输出"正确", 否则输出"错误" 

3) 输入12,或者15, 输出"正确", 否则输出"错误" 

4) 把5以内的正整数都转换成中国大些数字 

5) 自己随便设计一个程序, 应用今天的知识 


四篇（共六篇）： 



大家好, 昨天我休息了一天, 所以今天写第4章:循环结构 

我们先来看一道题:商场进行每日结算, 要求累加出今天的营业额, 每次输入一个数, 这道题其实很简单, 但就我们现在学 

过的知识要完成这道题相当麻烦, 我们来分析一下. 首先, 我们需要知道买卖的次数, 这样才能控制输入的次数,但是, 这种设 

计是非常低效的, 每天都要重新设计程序. 假定今天进行了5次交易, 以下是源程序: 

dim sum 
sum=0 '初始化变量 
sum=sum + int(inputbox("请输入交易额")) 
'sum=sum+x 这种形式是把本身的值取出来, 进行一次运算, 再放回本身, 这种方法很有用处 
'这里使用了函数嵌套, 把inputbox的返回值直接传给int函数, 转化成整数, 下同 
sum=sum + int(inputbox("请输入交易额")) 
sum=sum + int(inputbox("请输入交易额")) 
sum=sum + int(inputbox("请输入交易额")) 
sum=sum + int(inputbox("请输入交易额")) 
msgbox(sum) 

看到了吗, 我通过把计算过程复制了5遍才设计好了程序, 这种程序在汽车交易所等交易次数少的地方还能凑合着用, 如果 

放到超市岂不是要复制, 粘贴几千遍? 我们今天讲的内容就可以克服这种缺陷, 首先, 我们来讲以下Do...Loop语句. 

do...loop的结构看上去非常简单, 就是:do...loop, 仅此而已, 这个结构不断执行do和loop之间的语句(学名叫:循环体), 
永不停止. 举个例子来说: 

do 
msgbox("这个信息会不断重复出现, 要停止程序请使用任务管理器(Ctrl+Alt+Del)中止wscript进程") 
loop 

运行这个程序, 当你点销掉一个对话框马上会出来另一个, 你永远点不完, 总有下一个. 谁会运行这样的程序? 除非是给 

别人捣乱(我就干过这种事), 所以在do..loop结构中还有一个语句:exit do, 这个语句将终止循环, 跳到loop后面的语句继续 

执行. 据个例子来说: 

dim a '注意:常量不需要在dim里面声明,否则会引发错误 
const pass="123456" '这是一个字符串 请用""包裹起来. 设定密码为常量, 不可变更 
do 
a=inputbox("请输入密码") 
if a=pass then 
msgbox("密码校验成功") 
exit do 
end if 
loop 

这个程序会一直不停的问你密码, 知道你输入了正确的密码为止.(if可以嵌套在另一个if当中, 也可以嵌套在循环体当中 

, 所以一定要用缩进, 来分清楚程序的各个部分). 这个程序是很经典的, 早期的程序都是这么做的. 但是我们是Hacker, 所以 

我们了解系统的安全性, 这种无限次认证程序很容易被穷举破解, 我们要来限定认证的次数. 修改程序如下 

dim a,ctr 
ctr=0 '设置计数器 
const pass="pas123_" '上面的那个是弱密码, 这次改的强一点 
do 
if ctr=3 then 
msgbox("已经达到认证上限, 认证程序关闭") 
exit do 
else 
a=inputbox("请输入密码") 
if a=pass then 
msgbox("认证成功") 
msgbox("(你可以在这里加一段成功后得到的信息)") 
exit do 
else 
ctr=ctr+1 '如果密码出错就增加一次错误认证计数 
msgbox("认证出错, 请检查密码") 
end if 
end if 
loop 

运行这个程序试试看, 当你出了3此错误以后, 就会停止再次询问密码, 关闭程序. telnet认证用来限制次数的程序与此大 

同小异. 要注意的是嵌套的if语句, 清仔细读一下这个程序, 可能比较难懂, 也请你试着自己设计一下类似的程序. 

其实, 要在do...loop加上验证的功能, 并不一定要用if, 我们可以直接利用do. 我来介绍一下while关键字, while可以放 
在do或者是loop后面, 然后再接一个表达式, 当表达式的值为true的时候(表达式成立),才运行循环体.我们来看一下修改后的 
程序" 

dim a,ctr 
ctr=0 
const pass="pas123_" 
do while ctr<3 
a=inputbox("请输入密码") 
if a=pass then 
msgbox("认证成功") 
msgbox("(你可以在这里加一段成功后得到的信息)") 
exit do 
else 
ctr=ctr+1 '如果密码出错就增加一次错误认证计数 
msgbox("认证出错, 请检查密码") 
end if 
loop 

这样实现的功能和上一个例子完全一样, 我们再来看看把while放在loop后面: 

dim a,ctr 
ctr=0 
const pass="pas123_" 
do 
a=inputbox("请输入密码") 
if a=pass then 
msgbox("认证成功") 
msgbox("(你可以在这里加一段成功后得到的信息)") 
exit do 
else 
ctr=ctr+1 '如果密码出错就增加一次错误认证计数 
msgbox("认证出错, 请检查密码") 
end if 
loop while ctr<3 

功能是一样的, 为什么要放在loop后面呢? 你把ctr的值改成3就知道了, while在do后面的程序会直接退出, 而在loop后面 

还会允许一次认证, 到了loop才结束.和while相反的是until, 用法和while一样, 不过他只有当后面的表达式的值为false(表 

达式不成立)的时候才执行循环体, 请自己试验一下 

ok, 我们来看另外一种循环结构,for....next, 这种循环结构是基于计数的, 也是在编程中最常见到的循环结构. 

dim i 
for i=0 to 5 
msgbox(i) 
next 

看到了吗?每次输出的i都是递增的, 但我们没有明确指出i要递增, 当i达到5的时候, 循环就结束了, 因为由0开始, 所以 

循环体执行了6次, 这一点很重要, 大部分东西都是从0开始而不是1. 这个程序也可以写成 

do的形式: 

dim i 
i=0 
do while i<5 
msgbox(i) 
i=i+1 '因为do不能自动计数, 必须手动加 
loop 

怎么样, 还是for比较好用吧. for在编程中很有用途, 我们再举一个例子, 顺便讲一下嵌套循环. 

dim i,j 
for i=1 to 9 
for i=1 to 9 
str=str & i * j & " " '&是和并字符串的符号 
next '每个next对应一个for 
next 

看看运行结果, 是否令你会想起小学时代的数学老师(丑陋的嘴脸). 要注意, 这里有一个"大"的for, 和一个小的for, 当 

小的for执行完一
